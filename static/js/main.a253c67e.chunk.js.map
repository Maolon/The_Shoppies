{"version":3,"sources":["assets/image.svg","api/const.ts","components/ShopiEmpty/index.tsx","util/isEleExist.ts","hooks/nomReducer.ts","hooks/context.tsx","components/Card/index.tsx","components/Grid/index.tsx","components/ShopiList/index.tsx","components/Banner/index.tsx","api/api.ts","App.tsx","hooks/useSearch.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","Methods","ShopieEmpty","style","height","width","display","justifyContent","alignItems","imageStyle","description","color","isEleExist","noms","id","data","imdbID","initialState","nomReducer","state","action","type","message","success","payload","filter","itm","AppContext","createContext","dispatch","AppProvider","children","useReducer","Provider","value","Meta","Card","ShopieCard","Title","Year","Type","Poster","useContext","useState","imgErr","setImgErr","hoverable","cover","alt","src","defaultImg","onError","maxWidth","className","title","onClick","disabled","shape","icon","CrownTwoTone","twoToneColor","ghost","ShoppieGrid","map","ele","idx","xs","sm","md","lg","xl","key","ShopieList","itemLayout","dataSource","renderItem","item","Item","avatar","href","DeleteOutlined","Banner","fetch_API","url","method","a","fetch","mode","res","ok","json","Header","Layout","Content","Footer","Sider","Search","Input","App","search","setSearch","result","setResult","useEffect","SEARCH_URL","process","Promise","race","get","then","val","console","log","Response","resolve","reject","setTimeout","error","fetchResult","useSearch","document","placeholder","onSearch","enterButton","size","breakpoint","collapsedWidth","onBreakpoint","broken","onCollapse","collapsed","theme","fontSize","margin","minHeight","length","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.a253c67e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image.c0b2bf06.svg\";","export enum Methods {\r\n    put = \"put\",\r\n    get = \"get\",\r\n    delete = \"delete\",\r\n    post = \"post\"\r\n}\r\n\r\nexport const HOST = 'http://www.omdbapi.com/'","import React from \"react\";\r\nimport { Empty } from \"antd/es\";\r\n\r\nconst ShopieEmpty: React.FC = () => {\r\n  return (\r\n    <div\r\n      style={{\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <Empty\r\n        style={{}}\r\n        imageStyle={{\r\n          height: 60,\r\n        }}\r\n        description={<span style={{color:\"grey\"}}>No Search Result</span>}\r\n      ></Empty>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShopieEmpty;\r\n","import { Noms } from \"../hooks/nomReducer\";\r\n\r\nexport const isEleExist = (noms: Noms, id: string) => {\r\n  for (let itm of noms.data) {\r\n    if (itm.imdbID === id) return true;\r\n  }\r\n  return false;\r\n};\r\n","import { message } from \"antd/es\";\r\n\r\nexport interface Movie {\r\n  Title: string;\r\n  Year: string;\r\n  imdbID: string;\r\n  Type: string;\r\n  Poster: string;\r\n}\r\n\r\nexport interface Noms {\r\n  data: Movie[];\r\n}\r\n\r\nexport const initialState: Noms = {\r\n  data: [],\r\n};\r\n\r\ninterface Action {\r\n  type: string;\r\n  id: string;\r\n  payload: Movie;\r\n}\r\n\r\nexport const nomReducer = (state: Noms, action: Action) => {\r\n  switch (action.type) {\r\n    case \"ADD_NORM\":\r\n      message.success(\"Success Add A Nominated Movie\")\r\n      return { data: [...state.data, action.payload] };\r\n    case \"DEL_NORM\":\r\n      message.success(\"Success Delete A Nominated Movie\")  \r\n    return {\r\n        data: [...state.data.filter((itm) => itm.imdbID !== action.id)],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { createContext, useReducer } from 'react';\r\nimport { nomReducer, initialState, Noms } from './nomReducer';\r\n\r\n\r\nconst AppContext = createContext<{\r\n  state: Noms;\r\n  dispatch: React.Dispatch<any>;\r\n}>({\r\n  state: initialState,\r\n  dispatch: () => null\r\n});\r\n\r\n\r\nconst AppProvider: React.FC = ({ children }) => {\r\n  const [state, dispatch] = useReducer(nomReducer, initialState);\r\n\r\n  return (\r\n    <AppContext.Provider value={{state, dispatch}}>\r\n      {children}\r\n    </AppContext.Provider>\r\n  )\r\n}\r\n\r\nexport { AppContext, AppProvider };","import React, { useContext, useState } from \"react\";\r\nimport { Movie } from \"../../hooks/nomReducer\";\r\nimport { Card, Button } from \"antd/es\";\r\nimport { CrownTwoTone } from \"@ant-design/icons\";\r\nimport { isEleExist } from \"../../util/isEleExist\";\r\nimport { AppContext } from \"../../hooks/context\";\r\nimport defaultImg from \"../../assets/image.svg\";\r\nconst { Meta } = Card;\r\n\r\nconst ShopieCard: React.FC<Movie> = ({ Title, Year, imdbID, Type, Poster }) => {\r\n  const { state, dispatch } = useContext(AppContext);\r\n  const [imgErr, setImgErr] = useState(false);\r\n  return (\r\n    <Card\r\n      hoverable\r\n      cover={\r\n        <img\r\n          alt={Title}\r\n          src={!imgErr ? Poster : defaultImg}\r\n          onError={() => {\r\n            setImgErr(true);\r\n          }}\r\n        />\r\n      }\r\n      style={{ maxWidth: \"30vh\" }}\r\n      className=\"shoppie-card\"\r\n    >\r\n      <Meta\r\n        title={Title}\r\n        \r\n        description={\r\n          <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n            <div>{Year}</div>\r\n            <Button\r\n              type=\"default\"\r\n              onClick={() =>\r\n                  dispatch({\r\n                      type: \"ADD_NORM\",\r\n                      id: imdbID,\r\n                      payload: {\r\n                        Title: Title,\r\n                        Year: Year,\r\n                        imdbID: imdbID,\r\n                        Type: Type,\r\n                        Poster: Poster,\r\n                      },\r\n                    })\r\n              }\r\n              disabled = {isEleExist(state, imdbID)}\r\n              shape=\"circle\"\r\n              icon={\r\n                <CrownTwoTone\r\n                  twoToneColor={\r\n                    isEleExist(state, imdbID) ? \"#1890ff\" : \"#A4A4A4\"\r\n                  }\r\n                />\r\n              }\r\n              ghost\r\n            />\r\n          </div>\r\n        }\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ShopieCard;\r\n","import React from \"react\";\r\nimport { Noms } from \"../../hooks/nomReducer\";\r\nimport ShopieCard from \"../Card\";\r\nimport { Row, Col } from \"antd/es\";\r\n\r\nconst ShoppieGrid: React.FC<Noms> = ({ data }) => {\r\n  return (\r\n    <Row>\r\n      {data.map((ele, idx) => {\r\n        return (\r\n          <Col xs={8} sm={8} md={6} lg={5} xl={4} key={ele.Title}>\r\n            <ShopieCard\r\n              Title={ele.Title}\r\n              Year={ele.Year}\r\n              imdbID={ele.imdbID}\r\n              Type={ele.Type}\r\n              Poster={ele.Poster}\r\n            />\r\n          </Col>\r\n        );\r\n      })}\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default ShoppieGrid;\r\n","import React, { useContext } from 'react';\r\nimport { List, Avatar, Button } from 'antd/es';\r\nimport { AppContext } from '../../hooks/context';\r\nimport { DeleteOutlined } from '@ant-design/icons';\r\n\r\nconst ShopieList: React.FC = () =>{\r\n    const { state, dispatch } = useContext(AppContext);\r\n    return (\r\n        <List\r\n        itemLayout=\"horizontal\"\r\n        dataSource={state.data}\r\n        renderItem={item => (\r\n          <List.Item>\r\n            <List.Item.Meta\r\n              avatar={<Avatar src={item.Poster} shape={\"square\"}/>}\r\n              title={<a href=\"https://ant.design\">{item.Title}</a>}\r\n              description={ <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n              <div>{item.Year}</div>\r\n              <Button\r\n                type=\"dashed\"\r\n                onClick={() =>\r\n                  dispatch({\r\n                    type: \"DEL_NORM\",\r\n                    id: item.imdbID,\r\n                    payload: {\r\n                      Title: item.Title,\r\n                      Year: item.Year,\r\n                      imdbID: item.imdbID,\r\n                      Type: item.Type,\r\n                      Poster: item.Poster,\r\n                    },\r\n                  })\r\n                }\r\n                shape=\"circle\"\r\n                style={{ width:\"0.3vw\"}}\r\n                icon={<DeleteOutlined />}\r\n              />\r\n            </div>}\r\n            />\r\n          </List.Item>\r\n        )}\r\n      />)\r\n}\r\n  \r\nexport default ShopieList","import React from 'react';\r\nimport './Banner.scss';\r\n\r\nconst Banner: React.FC = () =>{\r\n    return (\r\n    <div className=\"shoppie-banner\">\r\n      You Have Nominated Five Movies\r\n  </div>)\r\n}\r\n  \r\nexport default Banner","import { Methods } from \"./const\";\r\n\r\n/**\r\n * @file API Request handler\r\n * @param url - api endpoint\r\n * @param method - http method\r\n * @param bodyParam - interface bodyParam\r\n * @return res.json\r\n * @thorws promise res\r\n * */\r\n\r\nexport const fetch_API = async (url: string, method: Methods) => {\r\n  const res = await fetch(url, {\r\n    method: method,\r\n    mode: \"cors\",\r\n  });\r\n  if (res.ok) return res.json();\r\n\r\n  throw res;\r\n};\r\n","import React, { useState, useEffect, useContext } from \"react\";\nimport \"./App.css\";\nimport \"antd/dist/antd.css\";\n\nimport { Layout, Input } from \"antd/es\";\nimport ShopieEmpty from \"./components/ShopiEmpty\";\nimport ShoppieGrid from \"./components/Grid\";\nimport ShopieList from \"./components/ShopiList\";\nimport { CrownTwoTone } from \"@ant-design/icons\";\nimport { AppContext } from \"./hooks/context\";\nimport Banner from \"./components/Banner\";\nimport { useSearch } from \"./hooks/useSearch\";\n\nconst { Header, Content, Footer, Sider } = Layout;\nconst { Search } = Input;\n\nconst App: React.FC = () => {\n  const { state } = useContext(AppContext);\n  const {result,setSearch,search} = useSearch();\n  \n  useEffect(() => {\n    document.title = \"Shoppie\";\n  }, []);\n\n  return (\n    <Layout>\n      <Header className=\"header\">\n        <div className=\"shoppie-title\">\n          <div>Shoppies</div>\n          <Search\n            placeholder=\"input movie title\"\n            onSearch={(val) => {\n              setSearch(val);\n            }}\n            enterButton\n            size=\"large\"\n            style={{ width: \"60%\" }}\n          />\n        </div>\n      </Header>\n      <Content>\n        <Layout className=\"site-layout-background\" style={{ height: \"90vh\" }}>\n          <Sider\n            breakpoint=\"lg\"\n            collapsedWidth=\"0\"\n            onBreakpoint={(broken) => {}}\n            onCollapse={(collapsed, type) => {}}\n            theme=\"light\"\n          >\n            <span style={{ fontSize: \"2rem\",margin:\"0 0 0 0.5vw\"}}>\n              <CrownTwoTone />\n              <span> Nominations</span>\n            </span>\n            <ShopieList />\n          </Sider>\n          <Content style={{ minHeight: 280, height: \"auto\" }}>\n            {state.data.length >= 5 ? <Banner /> : \"\"}\n            {search === \"\" || result.data.length === 0 ? (\n              <ShopieEmpty />\n            ) : (\n              <ShoppieGrid data={result.data} />\n            )}\n          </Content>\n        </Layout>\n      </Content>\n      <Footer style={{ textAlign: \"center\" }}>\n        Shoppies ©2020 Created by Tony He\n      </Footer>\n    </Layout>\n  );\n};\n\nexport default App;\n","import { useEffect, useState } from \"react\";\r\nimport { HOST, Methods } from \"../api/const\";\r\nimport { initialState } from \"./nomReducer\";\r\nimport { fetch_API } from \"../api/api\";\r\nimport { message } from \"antd/es\";\r\n\r\nexport const useSearch = () => {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [result, setResult] = useState(initialState);\r\n\r\n  useEffect(() => {\r\n    const SEARCH_URL = `${HOST}?apikey=${process.env.REACT_APP_API_KEY}&s=${search}&r=json`;\r\n    const fetchResult = async () => {\r\n      try {\r\n        await Promise.race([\r\n          fetch_API(SEARCH_URL, Methods.get).then((val) => {\r\n            console.log(val);\r\n            if (val.Response !== \"False\") setResult({ data: val.Search });\r\n            else setResult({ data: [] });\r\n          }),\r\n          new Promise((resolve, reject) => {\r\n            setTimeout(resolve, 5000, \"TimeOut\");\r\n          }),\r\n        ]);\r\n      } catch (err) {\r\n        console.log(err);\r\n        message.error(\"Network Error\");\r\n      }\r\n    };\r\n    fetchResult();\r\n  }, [search]);\r\n\r\n  return{result,setSearch,search }\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { AppProvider } from './hooks/context';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <AppProvider>\n    <App />\n    </AppProvider>,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}